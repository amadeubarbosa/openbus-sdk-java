--
Copyright (C) 2006-2010 Tecgraf/PUC-Rio. All rights reserved.
--
Openbus Demo Delegate Service
--

Esse exemplo exercita a criação de um serviço para o Openbus que utiliza o
recurso de delegação entre credenciais. A delegação entre credenciais funciona
somente quando a autenticação é feita através de certificados. Sua função é
possibilitar que o proprietário da credencial (credential.owner) delegue sua
credencial para uma outra entidade.

O cliente, ao se conectar, recebe uma credencial que é a padrão para
requisições, então pode redefinir qual o nome da entidade de delegação.

A classe do servidor é tecgraf.openbus.demo.delegate.HelloServer e ao executar
o processo servidor ele ficará em espera até uma chamada por um cliente que
exercite o método sayHello() do serviço. O cliente (por sua vez) faz uso do
recurso de delegação criando 2 threads que chamam o método sayHello() cada uma
identificando-se diferentemente ( A e B ).

Assim será impresso em tela a distinção entre as diferentes chamadas, onde em
cada o cliente informou um campo 'delegate' diferente. Por exemplo:
[Thread A]: Hello A !
[Thread B]: Hello B !

--
Utilizando Maven 2.x (http://maven.apache.org)
--
1) Compilar:

mvn compile
mvn install

2) Gerar certificados para o serviço Delegate:

$OPENBUS_HOME/specs/shell/openssl-generate.ksh -n DelegateService
$OPENBUS_HOME/specs/shell/openssl-generate.ksh -n DelegateClient
   
   A linha acima gera 4 arquivos (2 .key com a chave privada e outros 2 .crt
   com a chave pública). Precisamos copiar a chave privada na pasta resources:

cp *.key resources/

   Também é necessário o certificado do AccessControlService para que com ele o
   serviço DelegateService se cadastre no barramento (peça ao admin do
   barramento):

cp $OPENBUS_HOME/data/certificates/AccessControlService.crt resources/

3) Permitir que o serviço DelegateService possa ser publicado no barramento:

$OPENBUS_HOME/core/bin/run_management.sh --acs-host=<IP DO ACS> \
--acs-port=<PORTA DO ACS> --login=<login do admin> --script=management/demo.mgt

4) Executar o servidor:

./runserver.sh 

5) Executar o cliente:

./runclient.sh
